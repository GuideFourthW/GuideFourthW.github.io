<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[何为孤独?]]></title>
    <url>%2F2019%2F12%2F23%2F%E4%BD%95%E4%B8%BA%E5%AD%A4%E7%8B%AC%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[无红颜知己，无伯乐。欲将愉悦之事与人分享。分享之人？一念附满心头再念竟无一人便觉可笑，做罢。孤独再渗三分。 记与平安夜前一天，冬至后一天 2019年12月23日23点半]]></content>
      <categories>
        <category>Essay</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F07%2F21%2Findex%2F</url>
    <content type="text"><![CDATA[&lt;!DOCTYPE html&gt; var NexT = window.NexT || {}; var CONFIG = { root: ‘/‘, scheme: ‘Mist’, version: ‘7.1.2’, sidebar: {“position”:”left”,”display”:”post”,”offset”:12,”onmobile”:false,”dimmer”:false}, back2top: true, back2top_sidebar: false, fancybox: false, fastclick: false, lazyload: false, tabs: true, motion: {“enable”:true,”async”:false,”transition”:{“post_block”:”fadeIn”,”post_header”:”slideDownIn”,”post_body”:”slideDownIn”,”coll_header”:”slideLeftIn”,”sidebar”:”slideUpIn”}}, algolia: { applicationID: ‘’, apiKey: ‘’, indexName: ‘’, hits: {“per_page”:10}, labels: {“input_placeholder”:”Search for Posts”,”hits_empty”:”We didn’t find any results for the search: ${query}”,”hits_stats”:”${hits} results found in ${time} ms”} } }; CONFIG.page = { sidebar: “”, }; GuideFourthW .use-motion .motion-element, .use-motion .brand, .use-motion .menu-item, .sidebar-inner, .use-motion .post-block, .use-motion .pagination, .use-motion .comments, .use-motion .post-header, .use-motion .post-body, .use-motion .collection-title { opacity: initial; } .use-motion .logo, .use-motion .site-title, .use-motion .site-subtitle { opacity: initial; top: initial; } .use-motion .logo-line-before i { left: initial; } .use-motion .logo-line-after i { right: initial; } GuideFourthW Computers Essay Dynamic Share Guestbook Sitemap Suche 竞猜M串N计算 Veröffentlicht am 2019-08-18 Bearbeitet am 2019-10-13 in Computers Kommentare: Aufrufe: 最近的工作中涉及到竞彩网站的投注金额和组合计算，耗费了一番时间解决了这个问题。在此分享一下自己的看法(本文采用的是澳客的赛事选择支持多种玩法，竞彩官网并不支持多种玩法选择)蓝色区域左侧是胜平负玩法，右侧是让球胜平负玩法。足球一共有5种玩法 ，篮球有4种玩法，计算规则相同。底部红框，左侧是过关方式(可叠加,无冲突)，右侧是计算的金额(注数 2 倍数)，以及最高奖金显示。过关方式：将m场比赛组成n注。过关方式有两种情况​ 1:m串1(2串1,3串1,4串1,5串1以此类推，最多8串1)​ 2:m串n(3串3,3串4,4串4,4串5,4串6,4串11 最多8串247) 注意 只有n=1 或 n&gt;=m 本文采用递归来计算排列组合，并根据竞彩网规则进行过滤。m串1：所有选择中找m个组成一个组合，m串n 先找m串1，在把把每个组合遍历计算 该玩法所对应的串1组合规则：组合中不允许出现同场比赛多选，以及同种玩法进行的组合不允许重复不允许出现同场比赛多选(比如出现12,123)「​ 去掉排列组合里相同比赛的(根据比赛编号标记) 」同种玩法不允许重复(重复组合的产生原因：匹配出不含某个选择的组合 15 19 59 )「​ 玩法首选的排列组合不需要去，玩法下其他的排列组合需要和玩法首选的排列组合去（即排列组合中如存在去重复标记，根据重复的产生原因 将完全不含去重复标记的组合去掉） 」（玩法指一场比赛里的一个玩法）（比赛编号标记：一场比赛下的选择都打上比赛唯一标识)（去重复标记：不是玩法的首选择都使用标记，因其排列组合必然产生重复）示例： 3spfA 鹿岛鹿角胜平负玩法胜选择 1spfA 鹿岛鹿角胜平负玩法平选择案例代码将数据过滤成需要的标记格式，本例前端传输的格式为 20190930001-3~spf^2.21(比赛后台编号-胜~胜平负玩法^赔率)比赛编号+赔率用于奖金计算 ··public static void main(String[] args) &#123; String info = “20190930001-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4.95|20190930002-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4” + “.95|20190930003-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4.95|20190930004-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4” + “.95|20190930005-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4.95|20190930006-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4” + “.95|20190930007-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4.95|20190930008-3~spf^2.21,1~spf^2.21,403~rq^4.95,401~rq^4.95”;// String info = “20190930001-3~spf^2.21,403~rq^4.95,401~rq^4.95|20190930002-3~spf^2.21|20190930003-3~spf^2.21”; FootballTicketImpl footballTicketImpl = new FootballTicketImpl(); List&lt;String&gt; passTypes = new ArrayList&lt;&gt;();// passTypes.add(“2_1”);passTypes.add(“3_1”);passTypes.add(“4_1”);// passTypes.add(“5_1”);passTypes.add(“6_1”);// passTypes.add(“2_1”);passTypes.add(“3_1”);passTypes.add(“4_1”);// passTypes.add(“5_1”);passTypes.add(“6_1”); passTypes.add(“8_247”); Instant inst1 = Instant.now();// List&lt;LotOrderTicket&gt; ticketList = footballTicketImpl.ticketHandle(new OutTicketDTO(1231L, 23, 10059, 1, info,// passTypes));// System.out.println(ticketList.size());// for (LotOrderTicket temp:ticketList) &#123;// System.out.println(temp.toString());// &#125; // 得出总注数 System.out.println(footballTicketImpl.getPourHandle(info, passTypes)); Instant inst2 = Instant.now(); System.out.println(“以毫秒计的时间差：” + Duration.between(inst1, inst2).toMillis()); System.out.println(“以秒计的时间差：” + Duration.between(inst1, inst2).getSeconds()); &#125; / 、 @param info 下注信息 @param passTypes 过关方式 @return M串1或者M串N有几种组合（几注） / @Override public int getPourHandle(String info, List&lt;String&gt; passTypes) &#123; List&lt;String&gt; result = new ArrayList&lt;&gt;(); for (String passType : passTypes) &#123; String[] mWithn = passType.split(““); Integer m = Integer.parseInt(mWithn[0]); Integer n = Integer.parseInt(mWithn[1]); ArrayList&lt;String&gt; temp = matchTransform(info, m, null, 0); if (temp == null) &#123; return 0; &#125; String[] bet = temp.toArray(new String[temp.size()]); ArrayList&lt;String&gt; tmpArr = new ArrayList&lt;&gt;(); Map&lt;String, String&gt; checkGroups = new Hashtable&lt;&gt;(); ArrayList&lt;String&gt; groups = new ArrayList&lt;&gt;(); combine(0, m, bet, false, checkGroups, tmpArr, groups); ArrayList&lt;String&gt; processGroups = new ArrayList&lt;&gt;(); processGroups.addAll(groups); if (n &gt; 1) &#123; //进入M串N groups.clear(); passType = passType.replace(““, “串”); for (String match : processGroups) &#123; match = match.substring(1, match.length() - 1); String[] CalculateN = match.split(“,”); String[] a = splitFrom.get(passType); for (int i = 0; i &lt; a.length; i++) &#123; if (appearNumber(Arrays.toString(CalculateN), “\*”) == CalculateN.length) &#123;// 不需要去重复 combine(0, Integer.valueOf(String.valueOf(a[i].charAt(0))), CalculateN, false, checkGroups, new ArrayList&lt;String&gt;(), groups); &#125; else &#123;// 需要去重复 combine(0, Integer.valueOf(String.valueOf(a[i].charAt(0))), CalculateN, true, checkGroups, new ArrayList&lt;String&gt;(), groups); &#125; i++; &#125; &#125; processGroups.clear(); processGroups.addAll(groups); &#125; result.addAll(processGroups); &#125; return result.size(); &#125; / 递归计算排列组合 @param index 单组合中已经累积的元素 @param k 一个组合需要几个元素组成 @param arr 源 @param checkGroups 不含重复的排列组合列表(先去掉此校验，如运行一段时间无妨 则彻底去除它) @param tmpArr 本次组成的排列组合 @param groups 一种过关方式的结果 / public static void combine(int index, int k, String[] arr, boolean repeat, Map&lt;String, String&gt; checkGroups, ArrayList&lt;String&gt; tmpArr, ArrayList&lt;String&gt; groups) &#123; if (k == 1) &#123; for (int i = index; i &lt; arr.length; i++) &#123; tmpArr.add(arr[i]); String isAdd = “add”; if (repeat) &#123; // isAdd = toRepeat(arr, checkGroups, tmpArr, isAdd); &#125; else &#123; Map&lt;String, String&gt; map = new Hashtable&lt;&gt;(); String tmpStr = tmpArr.toString(); String[] tmpArray = tmpStr.substring(0, tmpStr.length() - 1).split(“,”); for (String temp : tmpArray) &#123; //截取出组合中最后一个的比赛编号唯一标识存入集合 String matchCode = String.valueOf(temp.charAt(temp.length() - 1)); //如已包含 则表示排列组合拥有相同比赛 不允添加 if (map.get(matchCode) != null) &#123; isAdd = “”; break; &#125; //Value无用，只用Key和HASH特性 map.put(matchCode, matchCode); &#125; &#125; if (isAdd.equals(“add”)) &#123;// checkGroups.put(tmpArr.toString().replaceAll(“\“,””),tmpArr.toString().trim()); groups.add(tmpArr.toString()); &#125; for (Iterator it = tmpArr.iterator(); it.hasNext(); ) &#123; if (it.next().equals(arr[i])) it.remove(); &#125; &#125; &#125; else if (k &gt; 1) &#123; for (int i = index; i &lt;= arr.length - k; i++) &#123; tmpArr.add(arr[i]); combine(i + 1, k - 1, arr, repeat, checkGroups, tmpArr, groups); for (Iterator it = tmpArr.iterator(); it.hasNext(); ) &#123; if (it.next().equals(arr[i])) it.remove(); &#125; &#125; &#125; else &#123; return; &#125; &#125;/ 去除重复组合(同种玩法不允许重复) @param arr 选择的内容 @param checkGroups 不含重复的排列组合列表(先去掉此校验，如运行一段时间无妨 则彻底去除它) @param tmpArr 本次组成的排列组合 @param isAdd 是否能够添加 @return / public static String toRepeat(String[] arr, Map&lt;String, String&gt; checkGroups, ArrayList&lt;String&gt; tmpArr, String isAdd) &#123; String b = tmpArr.toString().replaceAll(“\“, “”); //去掉完全不含去重复标记的组合 for (int j = 0; j &lt; arr.length; j++) &#123; if (arr[j].indexOf(““) == -1) &#123; if (!tmpArr.toString().contains(arr[j])) &#123;// if (checkGroups.get(b.trim())!=null)&#123; isAdd = “”; return isAdd;// &#125; &#125; &#125; &#125; return isAdd; &#125; / @param schemeNumber 下注信息 @param m 要求组的比赛数 @param matchNumber 实体类映射参照（0：只计算注数，不需要映射。1：传票组合，需要映射） @param schemeNumber 未处理的下注信息 @param Type （计算注数：0，传票组合：1） @return 处理后的下注信息 / public static ArrayList&lt;String&gt; matchTransform(String schemeNumber, Integer m, Map&lt;String, String&gt; matchNumber, Integer Type) &#123; ArrayList&lt;String&gt; matchTransform = new ArrayList(); String[] matchs = schemeNumber.split(“\|”); if (matchs.length &lt; m) &#123; //不满足组M场比赛的要求 return null; &#125; for (int j = 0; j &lt; matchs.length; j++) &#123; String match = matchs[j]; String matchArray[] = match.split(“-“); String matchHead = matchArray[0]; String temp = matchArray[1]; String[] matchPlayType = temp.split(“,”); for (int i = 0; i &lt; matchPlayType.length; i++) &#123; StringBuffer playMethod = new StringBuffer(); StringBuffer matchNumberValue = new StringBuffer(); String symbol = “-“; String[] temp2 = matchPlayType[i].split(“~”); String[] temp3 = temp2[1].split(“\^”); String odds = temp3[1]; String playTypePart = temp3[0]; String playType = temp2[0] + playTypePart; int sum = appearNumber(matchTransform.toString(), playTypePart + letter[j]); if (sum == 0) &#123; playMethod.append(““); &#125; playMethod.append(playType); playMethod.append(letter[j]); matchTransform.add(playMethod.toString()); if (Type == 1) &#123; //key = 是否包含重复选择,玩法，比赛编号唯一标识,value = 对阵信息+玩法与赔率 matchNumberValue.append(matchHead).append(symbol).append(temp2[0]).append(symbol).append(odds); matchNumber.put(playMethod.toString(), matchNumberValue.toString()); &#125; &#125; &#125; return matchTransform; &#125; /* 获取指定字符串出现的次数 @param srcText 源字符串 @param findText 要查找的字符串 @return */ public static int appearNumber(String srcText, String findText) &#123; int count = 0; Pattern p = Pattern.compile(findText); Matcher m = p.matcher(srcText); while (m.find()) &#123; count++; &#125; return count; &#125; GuideFourthW 1 Artikel 1 Kategorien 1 schlagwörter RSS GitHub Twitter E-Mail 本站总访问量次 博客全站共:0 字&copy; 2019 欢迎您的到来😘 if (Object.prototype.toString.call(window.Promise) !== ‘[object Function]’) { window.Promise = null; } var GUEST = [‘nick’, ‘mail’, ‘link’]; var guest = ‘nick,mail,link’; guest = guest.split(‘,’).filter(function(item) { return GUEST.indexOf(item) &gt; -1; }); new Valine({ el: ‘#comments’, verify: false, notify: false, appId: ‘aH9v7REURlcbPru7Eevu2d6H-gzGzoHsz’, appKey: ‘AjzqWMFod38kVoCQ3SecQ4Lr’, placeholder: ‘Just say it.’, avatar: ‘mm’, meta: guest, pageSize: ‘10’ || 10, visitor: false, lang: ‘’ || ‘zh-cn’ }); // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = “search.xml”; if (search_path.length === 0) { search_path = “search.xml”; } else if (/json$/i.test(search_path)) { isXml = false; } var path = “/“ + search_path; // monitor main search box; var onPopupClose = function (e) { $(‘.popup’).hide(); $(‘#local-search-input’).val(‘’); $(‘.search-result-list’).remove(); $(‘#no-result’).remove(); $(“.local-search-pop-overlay”).remove(); $(‘body’).css(‘overflow’, ‘’); } function proceedsearch() { $(“body”) .append(‘‘) .css(‘overflow’, ‘hidden’); $(‘.search-popup-overlay’).click(onPopupClose); $(‘.popup’).toggle(); var $localSearchInput = $(‘#local-search-input’); $localSearchInput.attr(“autocapitalize”, “none”); $localSearchInput.attr(“autocorrect”, “off”); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { ‘use strict’; // start loading animation $(“body”) .append(‘‘ + ‘‘ + ‘‘ + ‘‘ + ‘‘) .css(‘overflow’, ‘hidden’); $(“#search-loading-icon”).css(‘margin’, ‘20% auto 0 auto’).css(‘text-align’, ‘center’); $.ajax({ url: path, dataType: isXml ? “xml” : “json”, async: true, success: function(res) { // get the contents from search data isfetched = true; $(‘.popup’).detach().appendTo(‘.header-inner’); var datas = isXml ? $(“entry”, res).map(function() { return { title: $(“title”, this).text(), content: $(“content”,this).text(), url: $(“url” , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\s-]+/); if (keywords.length &gt; 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length &gt; 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,””); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url).replace(/\/{2,}/g, ‘/‘); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != ‘’) { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) &gt; -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length &gt; 0 || indexOfContent.length &gt; 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length &lt;= end &amp;&amp; index.length != 0) { if (word === searchText) { searchTextCountInSlice++; } hits.push({position: position, length: word.length}); var wordEnd = position + word.length; // move to next position of hit index.pop(); while (index.length != 0) { item = index[index.length - 1]; position = item.position; word = item.word; if (wordEnd &gt; position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start &lt; 0){ start = 0; } if (end &lt; position + word.length) { end = position + word.length; } if(end &gt; content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text’s count and hits’ count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt(‘1’); if (upperBound &gt;= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ‘’; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += ‘‘ + text.substring(hit.position, end) + ‘‘; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ‘’; if (slicesOfTitle.length != 0) { resultItem += ““ + highlightKeyword(title, slicesOfTitle[0]) + ““; } else { resultItem += ““ + title + ““; } slicesOfContent.forEach(function (slice) { resultItem += ““ + ““ + highlightKeyword(content, slice) + “…“ + ““; }); resultItem += ““; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 &amp;&amp; keywords[0] === “”) { resultContent.innerHTML = ‘‘ } else if (resultItems.length === 0) { resultContent.innerHTML = ‘‘ } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ‘‘; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += ““; resultContent.innerHTML = searchResultList; } } if (‘auto’ === ‘auto’) { input.addEventListener(‘input’, inputEventFunction); } else { $(‘.search-icon’).click(inputEventFunction); input.addEventListener(‘keypress’, function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(“.local-search-pop-overlay”).remove(); $(‘body’).css(‘overflow’, ‘’); proceedsearch(); } }); } // handle and trigger popup window; $(‘.popup-trigger’).click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, ‘local-search-input’, ‘local-search-result’); } else { proceedsearch(); }; }); $(‘.popup-btn-close’).click(onPopupClose); $(‘.popup’).click(function(e){ e.stopPropagation(); }); $(document).on(‘keyup’, function (event) { var shouldDismissSearchPopup = event.which === 27 &amp;&amp; $(‘.search-popup’).is(‘:visible’); if (shouldDismissSearchPopup) { onPopupClose(); } }); function showTime(Counter) { var entries = []; var $visitors = $(‘.leancloud_visitors’); $visitors.each(function() { entries.push( $(this).attr(‘id’).trim() ); }); Counter(‘get’, ‘/classes/Counter’, { where: JSON.stringify({ url: { ‘$in’: entries } }) }) .done(function({ results }) { var COUNT_CONTAINER_REF = ‘.leancloud-visitors-count’; if (results.length === 0) { $visitors.find(COUNT_CONTAINER_REF).text(0); return; } for (var i = 0; i &lt; results.length; i++) { var item = results[i]; var url = item.url; var time = item.time; var element = document.getElementById(url); $(element).find(COUNT_CONTAINER_REF).text(time); } for (var i = 0; i &lt; entries.length; i++) { var url = entries[i]; var element = document.getElementById(url); var countSpan = $(element).find(COUNT_CONTAINER_REF); if (countSpan.text() == ‘’) { countSpan.text(0); } } }) .fail(function ({ responseJSON }) { console.log(‘LeanCloud Counter Error: ‘ + responseJSON.code + ‘ ‘ + responseJSON.error); }); } $(function() { $.get(‘https://app-router.leancloud.cn/2/route?appId=&#39; + ‘aH9v7REURlcbPru7Eevu2d6H-gzGzoHsz’) .done(function({ api_server }) { var Counter = function(method, url, data) { return $.ajax({ method: method, url: ‘https://‘ + api_server + ‘/1.1’ + url, headers: { ‘X-LC-Id’: ‘aH9v7REURlcbPru7Eevu2d6H-gzGzoHsz’, ‘X-LC-Key’: ‘AjzqWMFod38kVoCQ3SecQ4Lr’, ‘Content-Type’: ‘application/json’, }, data: data }); }; if ($(‘.post-title-link’).length &gt;= 1) { showTime(Counter); } }); });]]></content>
  </entry>
</search>
